import tkinter as tk
from tkinter.scrolledtext import ScrolledText
from tkinter import messagebox
import random
import string


#tkinter setup
T = tk.Tk()
T.geometry("600x400")
T.title("DEScryptor!")
T.configure(background="#1e1e1e")

button_style = {
    "font": ("Arial", 12, "bold"),
    "fg": "white",
    "bg": "#6e6e6e",
    "activebackground": "#4a4a4a",
    "bd": 0,
    "relief": "flat",
    "width": 10
}
label_style = {
    "font": ("Arial", 10, "bold"),
    "fg": "white",
    "bg": "#1e1e1e"
}
text_area_style = {
    "font": ("Arial", 12),
    "bg": "#dcdcdc",
    "height": 5,
    "width": 20,
    "bd": 0,
    "padx": 10,
    "pady": 10
}

PC1 = [
    57,   49,    41,   33,    25,    17,    9,
    1,   58,    50,   42,    34,    26,   18,
    10,    2,    59,   51,    43,    35,   27,
    19,   11,     3,   60,    52,    44,   36,
    63,   55,    47,   39,    31,    23,   15,
    7,   62,    54,   46,    38,    30,   22,
    14,    6,    61,   53,    45,    37,   29,
    21,   13,     5,   28,    20,    12,    4
    ]

PC2 = [
    14,    17,   11,    24,     1,    5,
    3,     28,   15,     6,    21,   10,
    23,    19,   12,     4,    26,    8,
    16,     7,   27,    20,    13,    2,
    41,    52,   31,    37,    47,   55,
    30,    40,   51,    45,    33,   48,
    44,    49,   39,    56,    34,   53,
    46,    42,   50,    36,    29,   32
]
        
E = [
    32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 
    8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 
    16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 
    24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1
]

P = [
    16, 7, 20, 21, 
    29, 12, 28, 17, 
    1, 15, 23, 26, 
    5, 18, 31, 10, 
    2, 8, 24, 14, 
    32, 27, 3, 9, 
    19, 13, 30, 6, 
    22, 11, 4, 25
]


IP = [
    58,   50,   42,    34,    26,   18,    10,    2,
    60,   52,   44,    36,    28,   20,    12,    4,
    62,   54,   46,    38,    30,   22,    14,    6,
    64,   56,   48,    40,    32,   24,    16,    8,
    57,   49,   41,    33,    25,   17,     9,    1,
    59,   51,   43,    35,    27,   19,    11,    3,
    61,   53,   45,    37,    29,   21,    13,    5,
    63,   55,   47,    39,    31,   23,    15,    7
]

IP_INVERSE = [
    40,     8,   48,    16,    56,   24,    64,   32,
    39,     7,   47,    15,    55,   23,    63,   31,
    38,     6,   46,    14,    54,   22,    62,   30,
    37,     5,   45,    13,    53,   21,    61,   29,
    36,     4,   44,    12,    52,   20,    60,   28,
    35,     3,   43,    11,    51,   19,    59,   27,
    34,     2,   42,    10,    50,   18,    58,   26,
    33,     1,   41,     9,    49,   17,    57,   25
]

hexa_to_bin = {
    '0': '0000', '1': '0001', '2': '0010', '3': '0011', '4': '0100',
    '5': '0101', '6': '0110', '7': '0111', '8': '1000', '9': '1001',
    'a': '1010', 'b': '1011', 'c': '1100', 'd': '1101', 'e': '1110', 'f': '1111'
}


hexa_to_char = {
    '61': 'a', '62': 'b', '63': 'c', '64': 'd', '65': 'e', '66': 'f', '67': 'g', '68': 'h', '69':'i',
    '6a':'j', '6b':'k', '6c':'l', '6d':'m', '6e':'n', '6f':'o', '70':'p', '71':'q', '72':'r', '73':'s',
    '74':'t', '75':'u', '76':'v', '77':'w', '78':'x', '79':'y', '7a':'z', '41':'A', '42':'B', '43':'C',
    '44':'D', '45':'E', '46':'F', '47':'G', '48':'H', '49':'I', '4a':'J', '4b':'K', '4c':'L', '4d':'M', '4e':'N',
    '4f':'O', '50':'P', '51':'Q', '52':'R', '53':'S', '54':'T', '55':'U', '56':'V', '57':'W', '58':'X', '59':'Y', '5a':'Z'
}


Sboxes = [

        {
    
            '000000':'1110', '000010':'0100', '000100':'1101', '000110':'0001', '001000':'0010', '001010':'1111', '001100':'1011', '001110':'1000',
            '010000':'0011', '010010':'1010', '010100':'0110', '010110':'1100', '011000':'0101', '011010':'1001', '011100':'0000', '011110':'0111',
            '000001':'0000', '000011':'1111', '000101':'0111', '000111':'0100', '001001':'1110', '001011':'0010', '001101':'1101', '001111':'0001',
            '010001':'1010', '010011':'0110', '010101':'1100', '010111':'1011', '011001':'1001', '011011':'0101', '011101':'0011', '011111':'1000',
            '100000':'0100', '100010':'0001', '100100':'1110', '100110':'1000', '101000':'1101', '101010':'0110', '101100':'0010', '101110':'1011',
            '110000':'1111', '110010':'1100', '110100':'1001', '110110':'0111', '111000':'0011', '111010':'1010', '111100':'0101', '111110':'0000',
            '100001':'1111', '100011':'1100', '100101':'1000', '100111':'0010', '101001':'0100', '101011':'1001', '101101':'0001', '101111':'0111',
            '110001':'0101', '110011':'1011', '110101':'0011', '110111':'1110', '111001':'1010', '111011':'0000', '111101':'0110', '111111':'1101'
            
        },

        {
    
            '000000':'1111', '000010':'0001', '000100':'1000', '000110':'1110', '001000':'0110', '001010':'1011', '001100':'0011', '001110':'0100',
            '010000':'1001', '010010':'0111', '010100':'0010', '010110':'1101', '011000':'1100', '011010':'0000', '011100':'0101', '011110':'1010',
            '000001':'0011', '000011':'1101', '000101':'0100', '000111':'0111', '001001':'1111', '001011':'0010', '001101':'1000', '001111':'1110',
            '010001':'1100', '010011':'0000', '010101':'0001', '010111':'1010', '011001':'0110', '011011':'1001', '011101':'1011', '011111':'0101',
            '100000':'0000', '100010':'1110', '100100':'0111', '100110':'1011', '101000':'1010', '101010':'0100', '101100':'1101', '101110':'0001',
            '110000':'0101', '110010':'1000', '110100':'1100', '110110':'0110', '111000':'1001', '111010':'0011', '111100':'0010', '111110':'1111',
            '100001':'1101', '100011':'1000', '100101':'1010', '100111':'0001', '101001':'0011', '101011':'1111', '101101':'0100', '101111':'0010',
            '110001':'1011', '110011':'0110', '110101':'0111', '110111':'1100', '111001':'0000', '111011':'0101', '111101':'1110', '111111':'1001'
            
        },

        {
    
            '000000':'1010', '000010':'0000', '000100':'1001', '000110':'1110', '001000':'0110', '001010':'0011', '001100':'1111', '001110':'0101',
            '010000':'0001', '010010':'1101', '010100':'1100', '010110':'0111', '011000':'1011', '011010':'0100', '011100':'0010', '011110':'1000',
            '000001':'1011', '000011':'0111', '000101':'0000', '000111':'1001', '001001':'0011', '001011':'0100', '001101':'0110', '001111':'1010',
            '010001':'0010', '010011':'1000', '010101':'0101', '010111':'1110', '011001':'1100', '011011':'1011', '011101':'1111', '011111':'0001',
            '100000':'1101', '100010':'0110', '100100':'0100', '100110':'1001', '101000':'1000', '101010':'1111', '101100':'0011', '101110':'0000',
            '110000':'1011', '110010':'0001', '110100':'0010', '110110':'1100', '111000':'0101', '111010':'1010', '111100':'1110', '111110':'0111',
            '100001':'0001', '100011':'1010', '100101':'1011', '100111':'0000', '101001':'0110', '101011':'1001', '101101':'1000', '101111':'0111',
            '110001':'0100', '110011':'1111', '110101':'1110', '110111':'0011', '111001':'1011', '111011':'0101', '111101':'0010', '111111':'1100'
            
        },

        {
    
            '000000':'0111', '000010':'1101', '000100':'1110', '000110':'0011', '001000':'0000', '001010':'0110', '001100':'1001', '001110':'1010',
            '010000':'0001', '010010':'0010', '010100':'1000', '010110':'0101', '011000':'1011', '011010':'1100', '011100':'0100', '011110':'1111',
            '000001':'1101', '000011':'1000', '000101':'1101', '000111':'0101', '001001':'0110', '001011':'1111', '001101':'0000', '001111':'0011',
            '010001':'0100', '010011':'0111', '010101':'0010', '010111':'1100', '011001':'0001', '011011':'1010', '011101':'1110', '011111':'1001',
            '100000':'1010', '100010':'0110', '100100':'1001', '100110':'0000', '101000':'1100', '101010':'1011', '101100':'0111', '101110':'1101',
            '110000':'1111', '110010':'0001', '110100':'0011', '110110':'1101', '111000':'0101', '111010':'0010', '111100':'1000', '111110':'0100',
            '100001':'0011', '100011':'1111', '100101':'0000', '100111':'0110', '101001':'1010', '101011':'0001', '101101':'1101', '101111':'1000',
            '110001':'1001', '110011':'0100', '110101':'0101', '110111':'1011', '111001':'1100', '111011':'0111', '111101':'0010', '111111':'1110'
            
        },

        {
    
            '000000':'0010', '000010':'1100', '000100':'0100', '000110':'0001', '001000':'0111', '001010':'1010', '001100':'1011', '001110':'0110',
            '010000':'1000', '010010':'0101', '010100':'0011', '010110':'1111', '011000':'1101', '011010':'0000', '011100':'1110', '011110':'1001',
            '000001':'1110', '000011':'1011', '000101':'0010', '000111':'1100', '001001':'0100', '001011':'0111', '001101':'1101', '001111':'0001',
            '010001':'0101', '010011':'0000', '010101':'1111', '010111':'1010', '011001':'0011', '011011':'1001', '011101':'1000', '011111':'0110',
            '100000':'0100', '100010':'0010', '100100':'0001', '100110':'1011', '101000':'1010', '101010':'1101', '101100':'0111', '101110':'1000',
            '110000':'1111', '110010':'1001', '110100':'1100', '110110':'0101', '111000':'0110', '111010':'0011', '111100':'0000', '111110':'0100',
            '100001':'1011', '100011':'1000', '100101':'1100', '100111':'0111', '101001':'0001', '101011':'1110', '101101':'0010', '101111':'1101',
            '110001':'0110', '110011':'1111', '110101':'0000', '110111':'1001', '111001':'1010', '111011':'0100', '111101':'0101', '111111':'0011'
            
        },

        {
    
            '000000':'1100', '000010':'0001', '000100':'1010', '000110':'1111', '001000':'1001', '001010':'0010', '001100':'0110', '001110':'1000',
            '010000':'0000', '010010':'1101', '010100':'0011', '010110':'0100', '011000':'1110', '011010':'0111', '011100':'0101', '011110':'1011',
            '000001':'1010', '000011':'1111', '000101':'0100', '000111':'0010', '001001':'0111', '001011':'1100', '001101':'1001', '001111':'0101',
            '010001':'0110', '010011':'0001', '010101':'1101', '010111':'1110', '011001':'0000', '011011':'1011', '011101':'0011', '011111':'1000',
            '100000':'1001', '100010':'1110', '100100':'1111', '100110':'0101', '101000':'0010', '101010':'1000', '101100':'1100', '101110':'0011',
            '110000':'0111', '110010':'0000', '110100':'0100', '110110':'1010', '111000':'0001', '111010':'1101', '111100':'1011', '111110':'0110',
            '100001':'0100', '100011':'0011', '100101':'0010', '100111':'1100', '101001':'1001', '101011':'0101', '101101':'1111', '101111':'1010',
            '110001':'1011', '110011':'1110', '110101':'0001', '110111':'0111', '111001':'0110', '111011':'0000', '111101':'1000', '111111':'1101'
            
        },

        {
    
            '000000':'0100', '000010':'1011', '000100':'0010', '000110':'1110', '001000':'1111', '001010':'0000', '001100':'1000', '001110':'1101',
            '010000':'0011', '010010':'1100', '010100':'1001', '010110':'0111', '011000':'0101', '011010':'1010', '011100':'0110', '011110':'0001',
            '000001':'1101', '000011':'0000', '000101':'1011', '000111':'0111', '001001':'0100', '001011':'1001', '001101':'0001', '001111':'1010',
            '010001':'1110', '010011':'0011', '010101':'0101', '010111':'1100', '011001':'0010', '011011':'1111', '011101':'1000', '011111':'0110',
            '100000':'0001', '100010':'0100', '100100':'1011', '100110':'1101', '101000':'1100', '101010':'0011', '101100':'0111', '101110':'1110',
            '110000':'1010', '110010':'1111', '110100':'0110', '110110':'1000', '111000':'0000', '111010':'0101', '111100':'1001', '111110':'0010',
            '100001':'0110', '100011':'1011', '100101':'1101', '100111':'1000', '101001':'0001', '101011':'0100', '101101':'1010', '101111':'0111',
            '110001':'1001', '110011':'0101', '110101':'0000', '110111':'1111', '111001':'1110', '111011':'0010', '111101':'0011', '111111':'1100'
            
        },

        {
    
            '000000':'1101', '000010':'0010', '000100':'1000', '000110':'0100', '001000':'0110', '001010':'1111', '001100':'1011', '001110':'0001',
            '010000':'1010', '010010':'1001', '010100':'0011', '010110':'1110', '011000':'0101', '011010':'0000', '011100':'1100', '011110':'0111',
            '000001':'0001', '000011':'1111', '000101':'1101', '000111':'1000', '001001':'1010', '001011':'0011', '001101':'0111', '001111':'0100',
            '010001':'1100', '010011':'0101', '010101':'0110', '010111':'1011', '011001':'0000', '011011':'1110', '011101':'1001', '011111':'0010',
            '100000':'0111', '100010':'1011', '100100':'0100', '100110':'0001', '101000':'1001', '101010':'1100', '101100':'1110', '101110':'0010',
            '110000':'0000', '110010':'0110', '110100':'1010', '110110':'1101', '111000':'1111', '111010':'0011', '111100':'0101', '111110':'1000',
            '100001':'0010', '100011':'0001', '100101':'1110', '100111':'0111', '101001':'0100', '101011':'1010', '101101':'1000', '101111':'1101',
            '110001':'1111', '110011':'1100', '110101':'1001', '110111':'0000', '111001':'0011', '111011':'0101', '111101':'0110', '111111':'1011'
            
        },

          ]

def bin_to_hex(binary_str):
    return hex(int(binary_str, 2))[2:]

def hex_to_bin(hex_str):
    return bin(int(hex_str, 16))[2:].zfill(len(hex_str) * 4)

def text_to_binary(text):
    binary_string = ''.join(format(ord(char), '08b') for char in text)
    return binary_string

def binary_to_text(binary_string):
    text = ''.join(chr(int(binary_string[i:i+8], 2)) for i in range(0, len(binary_string), 8))
    return text

def permute(block, table):
    return ''.join([block[i-1] for i in table])

def xor(a, b):
    return ''.join(['0' if i == j else '1' for i, j in zip(a, b)])

def sbox_substitution(block):
    output = ''
    for i in range(0, len(block), 6):
        row = int(block[i] + block[i+5], 2)
        col = int(block[i+1:i+5], 2)
        sbox_val = Sboxes[i // 6][f'{row:02b}{col:04b}']
        output += sbox_val
    return output

def round_function(right_half, round_key):
    expanded_right = permute(right_half, E)
    xored = xor(expanded_right, round_key)
    substituted = sbox_substitution(xored)
    return permute(substituted, P)

def generate_round_keys(key):
    round_keys = []
    key = hex_to_bin(key)
    key = permute(key, PC1)
    left_half, right_half = key[:28], key[28:]
    
    for shift_amount in range(16):
        left_half = left_half[1:] + left_half[:1]
        right_half = right_half[1:] + right_half[:1]
        combined = left_half + right_half
        round_key = permute(combined, PC2)
        round_keys.append(round_key)
    
    return round_keys

def Encrypt():
    global plain_text, cipher_text
    input_text = plain_text.get(1.0, tk.END).strip()
    key = key_entry.get().strip()
    
    if not input_text or not key:
        messagebox.showerror("Input Error", "Please provide both key and plain text.")
        return
    
    if len(key) != 8:
        messagebox.showerror("Key Error", "Key must be 8 characters long (64-bit DES key).")
        return
    
    plain_text_bin = text_to_binary(input_text)
    
    key_bin = text_to_binary(key)
    
    permuted_plain = permute(plain_text_bin[:64], IP)
    left_half, right_half = permuted_plain[:32], permuted_plain[32:]
    
    round_keys = generate_round_keys(key_bin)
    
    for i in range(16):
        new_right = xor(left_half, round_function(right_half, round_keys[i]))
        left_half = right_half
        right_half = new_right
    
    combined_block = right_half + left_half
    cipher_bin = permute(combined_block, IP_INVERSE)
    
    cipher_text_hex = bin_to_hex(cipher_bin)
    
    cipher_text.delete(1.0, tk.END)
    cipher_text.insert(tk.END, cipher_text_hex)

def Decrypt():
    global plain_text, cipher_text
    encrypted_text = cipher_text.get(1.0, tk.END).strip()
    key = key_entry.get().strip()

    if not encrypted_text or not key:
        messagebox.showerror("Input Error", "Please provide both key and cipher text.")
        return

    if len(key) != 8:
        messagebox.showerror("Key Error", "Key must be 8 characters long (64-bit DES key).")
        return

    try:
        cipher_text_bin = hex_to_bin(encrypted_text)
    except ValueError:
        messagebox.showerror("Decryption Error", "Invalid cipher text format. Make sure it's in hexadecimal.")
        return

    key_bin = text_to_binary(key)

    permuted_cipher = permute(cipher_text_bin[:64], IP)
    left_half, right_half = permuted_cipher[:32], permuted_cipher[32:]

    round_keys = generate_round_keys(key_bin)

    for i in range(15, -1, -1):
        new_right = xor(left_half, round_function(right_half, round_keys[i]))
        left_half = right_half
        right_half = new_right

    combined_block = right_half + left_half
    plain_bin = permute(combined_block, IP_INVERSE)

    plain_text_str = binary_to_text(plain_bin)

    plain_text.delete(1.0, tk.END)
    plain_text.insert(tk.END, plain_text_str)

def update_mode(mode):
    final_encrypt_btn.config(text=mode)

def clear1():
    plain_text.delete(1.0, tk.END)

def clear2():
    cipher_text.delete(1.0, tk.END)

def generate_random_key():
    random_key = ''.join(random.choices(string.ascii_letters + string.digits, k=8))
    key_entry.delete(0, tk.END)
    key_entry.insert(0, random_key)

def encrypt_text():
    key = key_entry.get()
    text = plain_text.get(1.0, tk.END).strip()
    if not key or not text:
        messagebox.showerror("Input Error", "Please provide both key and plain text.")
        return
    if len(key) != 8:
        messagebox.showerror("Key Error", "Key must be 8 characters long (64-bit DES key).")
        return
    try:
        Encrypt()
    except Exception as e:
        messagebox.showerror("Encryption Error", str(e))

def decrypt_text():
    key = key_entry.get()
    text = cipher_text.get(1.0, tk.END).strip()
    if not key or not text:
        messagebox.showerror("Input Error", "Please provide both key and cipher text.")
        return
    if len(key) != 8:
        messagebox.showerror("Key Error", "Key must be 8 characters long (64-bit DES key).")
        return
    try:
        Decrypt()
    except Exception as e:
        messagebox.showerror("Decryption Error", str(e))

def handle_final_button_click():
    mode = final_encrypt_btn.cget("text")
    if mode == "Encrypt":
        encrypt_text()
    elif mode == "Decrypt":
        decrypt_text()
        
final_encrypt_btn = tk.Button(T, text="Encrypt", **button_style, command=handle_final_button_click)
final_encrypt_btn.place(x=260, y=320)

key_label = tk.Label(T, text="Key", **label_style)
key_label.place(x=140, y=50)
key_entry = tk.Entry(T, font=("Arial", 12), width=25)
key_entry.place(x=140, y=80)

random_btn = tk.Button(T, text="Random", **button_style, command=generate_random_key)
random_btn.place(x=400, y=77)

encrypt_btn = tk.Button(T, text="Encrypt", **button_style, command=lambda: update_mode("Encrypt"))
encrypt_btn.place(x=20, y=50)

decrypt_btn = tk.Button(T, text="Decrypt", **button_style, command=lambda: update_mode("Decrypt"))
decrypt_btn.place(x=20, y=100)

plain_text_label = tk.Label(T, text="Plain Text", **label_style)
plain_text_label.place(x=140, y=150)
plain_text = ScrolledText(T, **text_area_style)
plain_text.place(x=140, y=180)

cipher_text_label = tk.Label(T, text="Cipher Text", **label_style)
cipher_text_label.place(x=380, y=150)
cipher_text = ScrolledText(T, **text_area_style)
cipher_text.place(x=380, y=180)

title_label = tk.Label(T, text="DEScryptor!", font=("Arial", 16, "bold"), bg="#1e1e1e", fg="white")
title_label.place(x=280, y=20)


T.mainloop()
